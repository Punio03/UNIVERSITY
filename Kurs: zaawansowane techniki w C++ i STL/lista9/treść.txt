Zadanie 1 (1 pkt).
Odczytaj ze standardowego wejścia ciąg liczb rzeczywistych pooddzielanych białymi znakami. Używając iteratora strumieniowego istream_iterator odczytaj te liczby, zapisz w wektorze a następnie policz średnią arytmetyczną i odchylenie standardowe dla tego zbioru danych i wypisz wyniki na standardowym wyjściu z dokładnością do 3 miejsc po kropce dziesiętnej.
Zadanie 2 (1 pkt).
Niech Φ(n) oznacza funkcję Eulera (tocjent), która dla każdej dodatniej liczby naturalnej zwraca liczbę liczb naturalnych nie większych od n i względnie pierwszych z n. Dla zadanej wartości k stablicuj kolejne wartości tocjenta Φ(1),Φ(2),…,Φ(k) a następnie zapisz je do pliku phi.txt, używając iteratora strumieninowego ostream_iterator z separatorem w postaci średnika i spacji "; ". Wartość k przekaż do programu poprzez argumenty wywołania.
Zadanie 3 (1 pkt).
Napisz program, który sprawdzi czy w lokalnym systemie plików istnieją podane pliki lub foldery. Jeśli tak, to wypisz ich najważniejsze parametry (ścieżka kanoniczna, data ostatniej modyfikacji, rozmiar dla pliku itp.). Nazwy plików i folderów przekaż do programu poprzez argumenty wywołania.
Zadanie 4 (2 pkt).
Napisz program, który wypisze zawartość wskazanego katalogu w lokalnym systemie plików. Jeśli podany przez użytkownika katalog nie istnieje, to wypisz stosowną informację na standardowe wyjście dla błędów. Najpierw wypisz nazwę kanoniczną wskazanego katalogu a potem jego zawartość, przy czym najpierw wypisz katalogi (w kolejności alfabetycznej) a potem pliki (również w kolejności alfabetycznej). Wypisując zawartość folderu posłuż się iteratorem directory_iterator. Nazwę katalogu pobierz ze standardowego wejścia.
Zadanie 5 (2 pkt).
Napisz program, który policzy i wypisze sumę rozmiarów wszystkich plików we wskazanym katalogi i jego podkatalogach. Jeśli podany przez użytkownika katalog nie istnieje, to wypisz stosowną informacjęna standardowe wyjście dla błędów. Analizując zawartość katalogu i podkatalogów posłuż się iteratorem recursive_directory_iterator. Nazwę katalogu pobierz ze standardowego wejścia.
Zadanie 6 (3 pkt).
Zaprojektuj i zaimplementuj mechanizm serializacji i deserializacji obiektów w C++. Serializacja i deserializacja ma pracować na strumieniach binarnych. Zaimplementuj zestaw funkcji do serializacji i deserializacji dla:
wszystkich typów podstawowych (bool, char, short, int, long long, float, double i long double);
łańcuchów znakowych typu string;
tablic wymienionych powyżej typów danych (deserializacja powinna utworzyć nową tablicę na stercie operatorem new, wypełnić ją danymi i zwrócić parę: wskaźnik do tablicy i jej rozmiar);
obiektów specjalnie oznaczonych klas serializowalnych (na przykład dziedziczących po abstarkcyjnej klasie serializable) - do przetestowania tej serializacji zdefiniuj klasę opisującą osobę (imię i nazwisko typu string, waga typu int, wzrost typu double i kolor oczu typu color, gdzie color będzie obiektem serializowalnym pamiętającym kolor w postaci RGB) i na niej przeprowadź eksperymenty;
tablic obiektów serializowalnych.
Czy Twoje rozwiązanie poradziłoby sobie z kolekcjami obiektów? Co należałoby dodać do Twojego rozwiązania, aby mechanizm ten poradził sobie z zapętlonymi strukturami, jak na przykład graf obiektów?
